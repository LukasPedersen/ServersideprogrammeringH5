@page "/"
@inject AuthenticationStateProvider state
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Dashboard</PageTitle>

<div class="container px-4">
    <div class="row gx-5">
        <div class="col">
            <div class="p-3 GaugeMeter d-flex flex-column">
                <RadzenLabel Text="Current Temperature" Style="position: inherit; margin-left: auto; margin-right: auto; color:white;" />
                <RadzenRadialGauge Style="width: 100%; height: 225px;">
                    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="-40" Max="80" TickPosition=@GaugeTickPosition.Outside>
                        <RadzenRadialGaugeScalePointer Fill="da4e25" Value=@gaugeValue Length="1" Width="6" ShowValue=true Stroke="#da4e25">
                            <Template Context="pointer">
                                <h4 style="color:#da4e25; margin-top: 6px;">
                                    @pointer.Value <sup>°C</sup>
                                </h4>
                            </Template>
                        </RadzenRadialGaugeScalePointer>
                        <RadzenRadialGaugeScaleRange From="-40" To="-15" Fill="#0008fa" />
                        <RadzenRadialGaugeScaleRange From="-15" To="0" Fill="#009afa" />
                        <RadzenRadialGaugeScaleRange From="0" To="20" Fill="green" />
                        <RadzenRadialGaugeScaleRange From="20" To="40" Fill="orange" />
                        <RadzenRadialGaugeScaleRange From="40" To="80" Fill="red" />
                    </RadzenRadialGaugeScale>
                </RadzenRadialGauge>
            </div>
        </div>
        <div class="col">
            <div class="p-3 GaugeMeter d-flex flex-column">
                <RadzenLabel Text="Current Humidity" Style="position: inherit; margin-left: auto; margin-right: auto; color:white;" />
                <div style="height: 225px;">
                    <RadzenArcGauge Style="width: 100%; height: 218px;">
                        <RadzenArcGaugeScale Stroke="#da4e25" Step="10" Min="0" Max="100" MinorStep="2" Radius="1.5" TickPosition=@GaugeTickPosition.Outside Y="0.9" Margin="0">
                            <RadzenArcGaugeScaleValue Fill="#da4e25" Stroke="#da4e25" Value=@arcValue ShowValue=true>
                                <Template Context="pointer">
                                    <h4 style="color:#da4e25; margin-bottom: 80px;">
                                        @pointer.Value <sup>%</sup>
                                    </h4>
                                </Template>
                            </RadzenArcGaugeScaleValue>
                        </RadzenArcGaugeScale>
                    </RadzenArcGauge>
                </div>
            </div>
        </div>
    </div>
    <div class="row gx-5 buttomRow">

    </div>
</div>

@code {
    double gaugeValue;
    double arcValue;

    public int randomTemp
    {
        get
        {
            Random rnd = new Random();
            return rnd.Next(18, 28);
        }
    }
    public int randomHumit
    {
        get
        {
            Random rnd = new Random();
            return rnd.Next(50, 80);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await state.GetAuthenticationStateAsync();
        var user = authState.User;

        //if (user.Identity == null || !user.Identity.IsAuthenticated)
        //{
        //    NavigationManager.NavigateTo("/Login/Login");
        //}

        LoopLiveData();
    }

    public async Task LoopLiveData()
    {
        while (true)
        {
            await Task.Delay(10000);
            Telemetry newTelemetry = await Http.GetFromJsonAsync<Telemetry>($"http://10.135.16.161:32768/getLatestTelemetry");

            bool loop = true;
            while (loop)
            {
                System.Threading.Thread.Sleep(50);
                if (gaugeValue > (double)newTelemetry.Temperature)
                {
                    gaugeValue = gaugeValue - 1;
                }
                else if (gaugeValue < (double)newTelemetry.Temperature)
                {
                    gaugeValue = gaugeValue + 1;
                }

                if (arcValue > (double)newTelemetry.Humidity)
                {
                    arcValue = arcValue - 1;
                }
                else if (arcValue < (double)newTelemetry.Humidity)
                {
                    arcValue = arcValue + 1;
                }

                InvokeAsync(StateHasChanged);

                if (gaugeValue == (double)newTelemetry.Temperature && arcValue == (double)newTelemetry.Humidity)
                {
                    loop = false;
                    return;
                }
            }
        }
    }
}